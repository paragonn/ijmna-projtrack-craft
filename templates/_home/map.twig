{% extends "_/layouts/main" %}

{% block footerScriptBeforeApp %}
<script src="{{ mix('js/projects-search.js') }}" defer=""></script>
{% endblock %}

{% set stages = generalInformation.stages.all() %}
{% set countries = craft.categories.group("country").all() %}
{% set caseworks = craft.categories.group("casework").all() %}

{% set filters %}
<ul class="flex flex-wrap gap-1.5 max-w-[calc(100vw-100px)]">
    <template x-for="(name, index) in Object.keys(filters)" :key="`filter-${name}`">
        <template x-if="name == 'stage'">
            <li class="text-xs border border-blue-800 bg-white px-2 py-1.5 rounded-full flex gap-2 items-center">
                <span x-text="'Stage: ' + (typeof(filters[name]) !== 'undefined' ? filters[name].label : '')"></span>
                <a href="#" class="hover:text-blue-500 transition-all duration-300" @click.prevent="handleStageChange('')">
                    <svg width="9" height="9" xmlns="http://www.w3.org/2000/svg">
                        <use xlink:href="#icon-close"></use>
                    </svg>
                </a>
            </li>
        </template>
    </template>

    <template x-for="(name, index) in Object.keys(filters)" :key="`filter-${name}`">
        <template x-if="name != 'stage'">
            <template x-for="(item, i) in filters[name]" :key="`filter-${name}-${i}`">
                <li class="text-xs border border-blue-800 bg-white px-2 py-1.5 rounded-full flex gap-2 items-center">
                    <span x-text="item.label"></span>
                    <a href="#" class="hover:text-blue-500 transition-all duration-300" @click.prevent="uncheckCheckbox(item.target, item.value)">
                        <svg width="9" height="9" xmlns="http://www.w3.org/2000/svg">
                            <use xlink:href="#icon-close"></use>
                        </svg>
                    </a>
                </li>
            </template>
        </template>
    </template>
    <ul>
        <button class="text-xs px-2 py-1.5 underline rounded-full transition-all duration-300 hover:text-blue-500"
            @click.prevent="clearForm();"
        >Clear all filters</button>
    </ul>
</ul>
{% endset %}

{% block content %}
{{ craft.app.config.general.devMode ? ('<!-- Page: ' ~ _self ~ ' -->') | raw }}
<section class="mt-[79px]" x-data="{
    stage: '',
    filters: {},

    init() {
        let _this = this;
        let params = getQueryParams();
        _this.stage = getFromParams('stage');

        if(_this.stage) {
            let stage = document.querySelector(`.stage-wrapper[data-stage='${_this.stage}']`);
            if(! stage) {
                _this.stage = '';
            }
        }

        let country = getFromParams('country[]');
        _this.selectCheckboxes('country[]', country);

        let casework = getFromParams('casework[]');
        _this.selectCheckboxes('casework[]', casework);

        setTimeout(function() {
            _this.setFiltersFromFormFields();
        }, 10);
    },

    handleStageChange(stage) {
        let _this = this;
        if(_this.stage != stage) {
            _this.stage = stage;

            if(stage != '') {
                document.querySelectorAll(`input[type='checkbox']:checked`).forEach(function(item) {
                    item.checked = false;
                });
            }

            setTimeout(function() {
                _this.setFiltersFromFormFields();
                submitFormViaAjax();
            }, 10);
        }
    },

    setFiltersFromFormFields() {
        let _this = this;
        _this.filters = {};
        if(_this.stage != '') {
            let stage = document.querySelector('.stage-wrapper.active');
            if(stage) {
                let label = stage.querySelector('.js-stage-label').textContent;
                _this.filters['stage'] = {
                    target: 'stage',
                    label: label,
                    value: _this.stage
                }
            }
        }

        let names = ['country', 'casework'];
        for (let index = 0; index < names.length; index++) {
            let name = names[index];

            if(document.querySelectorAll(`input[name='${name}[]']:checked`).length) {
                _this.filters[name] = [];

                document.querySelectorAll(`input[name='${name}[]']:checked`).forEach(function(item) {
                    _this.filters[name].push({
                        target: name,
                        label: item.nextElementSibling.textContent,
                        value: item.value
                    });
                });
            }
        }
    },
    clearForm() {
        let _this = this;
        _this.stage = '';
        document.querySelector('form#js-search-form').reset();
        setTimeout(function() {
            _this.setFiltersFromFormFields();
            submitFormViaAjax();
        }, 10);
    },
    uncheckCheckbox(name, value) {
        let _this = this;
        let input = document.querySelector(`input[name='${name}[]'][value='${value}']`);
        if(input) {
            input.checked = false;

            setTimeout(function() {
                _this.setFiltersFromFormFields();
                submitFormViaAjax();
            }, 10);
        }
    },
    selectCheckboxes(name, values) {
        for (let index = 0; index < values.length; index++) {
            let input = document.querySelector(`input[name='${name}'][value='${values[index]}']`);
            if(input) {
                input.checked = true;
            }
        }
    }
}">
    <div class="h-[calc(100vh-79px)] relative flex items-stretch w-full overflow-hidden"
        x-data="{
            open: false,
            init() {
                if(typeof(window.location.href.split('?')[1]) === 'undefined') {
                    this.open = true;
                }
            }
        }"
    >
        <div class="relative z-20 shrink-0">
            <div class="bottom-0 top-0 absolute left-0 w-[336px] md:w-[407px] lg:w-[656px] transition-all duration-700 -translate-x-full" :class="open ? '-translate-x-full md:translate-x-0' : 'translate-x-0 md:-translate-x-full'" x-cloak>
                <div class="h-full bg-blue-800 overflow-y-auto scrollbar-thumb-rounded-full scrollbar-track-rounded-full scrollbar-thumb-blue-500/50 scrollbar-thin scrollbar-track-transparent">
                    <div class="px-5 md:px-8 lg:px-[74px] py-8 md:py-10">
                        <div>
                            <h4 class="text-xl md:text-2xl font-Baskervville text-white">Progress Toward Protecting 500 Million People from Slavery and Violence</h4>
                            {#<p class="text-white mt-2 text-xs">IJM Program Tracker: Updated Feb 2024</p>#}
                        </div>
                        <div class="mt-3 progress-active">
                            <div class="flex items-stretch gap-6 md:gap-7 lg:gap-[68px]">
                                <div class="md:w-10 sm:w-8 w-7 shrink-0"></div>
                                <div class="flex-1 w-full flex justify-between gap-4 border-b border-white py-2">
                                    <p class="text-xs font-bold text-blue-500">Program Progress</p>
                                    <p class="text-xs font-bold text-blue-500">Protection Target</p>
                                </div>
                            </div>

                            {% for i, stage in stages %}
                            {# {% set dots = stage.numberOfDots|default(0) %} #}
                            {% set dots = craft.entries.section("jurisdictions").stage(stage.stage.getValue()|default(":empty:")).count() %}
                            {% set dotsInGroupOf = stage.dotsInGroupOf.getValue()|default(3) %}
                            {% set blankAt = stage.blankAt.getValue()|default("bottomRight") %}
                            {% set pendingDots = dots > 0 ? dots % dotsInGroupOf : 0 %}
                            {% set dotsToPrint = dots > 0 ? dots - pendingDots : 0 %}

                            {% set currentStage = stage.stage.getValue()|default() %}
                            {% set nextStage = stages[i+1].stage.getValue()|default() %}

                            <a href="#"
                                class="stage-wrapper flex items-stretch gap-6 md:gap-7 lg:gap-[68px] target-progress trigger-progress cursor-pointer"
                                data-stage="{{ stage.stage.getValue() }}"
                                :class="stage == '{{ stage.stage.getValue() }}' ? 'active' : ''"
                                @click.prevent="open = !open, handleStageChange('{{ stage.stage.getValue() }}')"
                            >
                                <div class="md:w-10 sm:w-8 w-7 shrink-0">
                                    <div class="bg-blue-500 borderactive border-t border-x border-white/40 h-full flex items-center justify-center w-full">
                                        <div class="grid grid-cols-1 gap-1 content-progress">
                                            {% if pendingDots > 0 and blankAt in ["topLeft", "topRight"] %}
                                            <div class="flex w-full flex-row gap-1{{ blankAt == "topLeft" ? ' justify-end' }}">
                                                {% for dot in 1..pendingDots %}
                                                <div class="w-1 h-1 bg-white block rounded-full"></div>
                                                {% endfor %}
                                            </div>
                                            {% endif %}

                                            {% if dotsToPrint > 0 %}
                                            {% for dotBatch in (1..dotsToPrint)|batch(dotsInGroupOf) %}
                                            <div class="flex w-full flex-row gap-1">
                                                {% for dot in dotBatch %}
                                                <div class="w-1 h-1 bg-white block rounded-full"></div>
                                                {% endfor %}
                                            </div>
                                            {% endfor %}
                                            {% endif %}

                                            {% if pendingDots > 0 and blankAt in ["bottomLeft", "bottomRight"] %}
                                            <div class="flex w-full flex-row gap-1{{ blankAt == "bottomLeft" ? ' justify-end' }}">
                                                {% for dot in 1..pendingDots %}
                                                <div class="w-1 h-1 bg-white block rounded-full"></div>
                                                {% endfor %}
                                            </div>
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>

                                <div class="flex-1 content-progress text-white text-xs{{ currentStage != "projectsReady" ? ' px-1.5 w-full flex justify-between gap-4 pt-3.5 pb-5' : '' }}{{ (nextStage != "projectsReady" ? ' border-b border-white/40' ) }}">
                                    {% if currentStage == "projectsReady" %}
                                    <div class="flex items-center gap-5 relative -top-2">
                                        <div class="flex-1 w-full ml-2 h-px bg-blue-500 relative after:absolute after:-left-2 after:top-1/2 after:-translate-y-1/2 after:border-t-transparent after:border-r-transparent after:border-b-transparent after:border-blue-500 after:border-[8px]"></div>
                                        <div class="uppercase text-blue-500 shrink-0">LAUNCHED</div>
                                        <div class="flex-1 w-full mr-2 h-px bg-blue-500 relative before:absolute before:-right-2 before:top-1/2 before:-translate-y-1/2 before:border-t-transparent before:border-l-transparent before:border-b-transparent before:border-blue-500 before:border-[8px]"></div>
                                    </div>
                                    <div class="pt-3.5 pb-5 w-full flex justify-between gap-4">
                                    {% endif %}

                                    <div>
                                        <p class="font-bold uppercase js-stage-label">{{ stage.stage.getLabel() }}</p>
                                        {{ stage.byline | replace({
                                            '<p': '<p class="mt-1.5"'
                                        }) | raw }}
                                    </div>
                                    <div class="whitespace-nowrap">
                                        <p class="font-bold uppercase">{{ stage.protectionTargetHeading }}</p>
                                        <p class="mt-1.5">({{ dots }} Jurisdictions)</p>
                                    </div>

                                    {% if currentStage == "projectsReady" %}
                                    </div>
                                    {% endif %}
                                </div>
                            </a>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="h-full border-l border-white bg-blue-800 duration-700 transition-transform" :class="open ? 'translate-x-0 lg:translate-x-[656px] md:translate-x-[407px]' : 'translate-x-[336px] md:translate-x-0'">
                <div class="w-[50px] md:w-[62px] h-full">
                    <div>
                        <button class="flex items-center justify-center h-[87px] w-full" :class="open ? 'md:bg-blue-500' : 'bg-blue-500 md:bg-transparent'" @click="open = !open" @keydown.escape="open = false">
                            <svg width="33" height="32" viewBox="0 0 33 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="transition-all duration-300" :class="open ? 'rotate-180 md:rotate-0' : 'rotate-0 md:rotate-180'">
                                <path d="M3.00004 16.5928L32.5911 16.5928" stroke="white" stroke-width="3" />
                                <path d="M17.6516 2L3 15.9978L17.6516 30.4074" stroke="white" stroke-width="3" />
                            </svg>
                        </button>
                    </div>
                    <div class="border-t border-white flex gap-8 flex-col h-[calc(100%-87px)] py-11">
                        <div class="flex w-full justify-center">
                            <p class="[writing-mode:vertical-lr] rotate-180 text-white">IJM Program Tracker</p>
                        </div>
                        <div class="flex w-full flex-col justify-end flex-1 items-center h-full">
                            <span>
                                <svg width="24" height="39" :class="open ? 'md:fill-blue-500' : 'fill-blue-500 md:fill-transparent'" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M11.613 32.806 1 37.265V1h22v36.264l-10.613-4.458-.387-.162-.387.162Z" stroke="#fff" stroke-width="2" />
                                    <circle cx="6.675" cy="11.92" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="6.675" cy="16.791" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="6.675" cy="22.093" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="11.977" cy="16.791" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="11.977" cy="11.92" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="17.28" cy="16.791" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="11.977" cy="22.093" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="17.28" cy="11.92" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                    <circle cx="17.28" cy="22.093" r=".648" fill="#fff" stroke="#fff" stroke-width="1.5" />
                                </svg>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="" x-data="{drawer: false }">
            <div id="mapbox_map"
                class="h-full !absolute z-10 w-[calc(100vw-50px)] md:w-[calc(100vw-62px)]"
                style="overflow-anchor: none;"
                data-mapbox="{{ getenv('MAPBOX_ACCESS_TOKEN') }}"
                data-lang="{{ currentSite.language }}"
                data-token="{{ getenv('GQL_BEARER_TOKEN') }}"
            ></div>

            <div class="w-full h-full absolute top-0 left-0 backdrop-opacity-10 backdrop-invert bg-black/40 z-50 hidden ajax--loading">
                <div class="h-full w-full flex justify-center items-center">
                    <div class="inline-block relative">
                        <svg width="40" height="40" fill="currentColor" class="text-primary-500 mx-auto animate-spin">
                            <use xlink:href="#icon-spinner"></use>
                        </svg>
                    </div>
                </div>
            </div>

            <div class="relative">
                <div class="z-30 whitespace-nowrap duration-700 transition-transform relative inline-block md:pl-8 md:pt-8 pt-6 pl-6" :class="open ? 'translate-x-0 lg:translate-x-[656px] md:translate-x-[407px]' : 'translate-x-[336px] md:translate-x-0'">
                    <button x-on:click="drawer = ! drawer" @keydown.escape="drawer = false" :class="{'bg-blue-800 text-white' : drawer , 'bg-white text-blue-800' : !drawer}" class="relative group flex gap-5 px-5 py-3 hover:bg-blue-800 hover:text-white border border-blue-800 font-medium text-lg transition-all duration-300 shrink-0">
                        <span class="md:block hidden">
                            Filter Map
                        </span>
                        <svg width="23" height="23" viewBox="0 0 23 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0 3.5H11.25H22.5" stroke="currentColor" stroke-width="2" />
                            <path d="M0 12H11.25H22.5" stroke="currentColor" stroke-width="2" />
                            <path d="M0 20H11.25H22.5" stroke="currentColor" stroke-width="2" />
                            <circle cx="6" cy="3" r="2" class="fill-white group-hover:fill-blue-800" fill="currentColor" stroke="currentColor" stroke-width="2" />
                            <circle cx="17" cy="12" r="2" class="fill-white group-hover:fill-blue-800" fill="currentColor" stroke="currentColor" stroke-width="2" />
                            <circle cx="11" cy="20" r="2" class="fill-white group-hover:fill-blue-800" fill="currentColor" stroke="currentColor" stroke-width="2" />
                        </svg>
                    </button>
                </div>
                <div class="z-30 whitespace-nowrap duration-700 transition-transform relative md:pl-8 pl-6" :class="open ? 'translate-x-0 lg:translate-x-[656px] md:translate-x-[407px]' : 'translate-x-[336px] md:translate-x-0'">
                    <div class="mt-5" x-show="Object.keys(filters).length" style="display: none;">
                        {{ filters|raw }}
                    </div>
                </div>
            </div>
            <div class="relative">
                <div x-show="drawer" @click="drawer = false" class="fixed block inset-0 bg-blue-800/40 z-50" x-transition:enter="transition-opacity ease-out duration-700" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-in duration-700" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"></div>
                <div class="relative">
                    <form method="get" action="/{{ craft.app.request.fullPath }}" style="display:none"
                        id="js-search-form"
                        class="space-y-8 duration-700 z-50 ease-in-out right-0 w-full md:w-[450px] lg:w-[631px] bg-white fixed top-0 h-screen overflow-y-auto scrollbar-thumb-rounded-full scrollbar-track-rounded-full scrollbar-thumb-blue-500/50 scrollbar-track-transparent"
                        @submit.prevent="drawer = false, setFiltersFromFormFields(), submitFormViaAjax();"
                        x-show="drawer"
                        x-transition:enter="transition-transform ease-in-out duration-1000"
                        x-transition:enter="transform transition ease-in-out duration-1000"
                        x-transition:enter-start="translate-x-full opacity-0"
                        x-transition:enter-end="translate-x-0 opacity-100"
                        x-transition:leave="transform transition ease-in-out duration-1000"
                        x-transition:leave-start="translate-x-0 opacity-100"
                        x-transition:leave-end="translate-x-full opacity-0"
                    >
                        <div style="display: none;">
                            <input type="hidden" name="stage" x-model="stage">
                        </div>
                        <div class="flex bg-white items-start gap-8 justify-between w-full z-50 sticky py-8 px-8 md:px-16 top-0 border-b-2 border-blue-800">
                            <div>
                                <div>
                                    <p class=""><span class="filter-counter"></span> Filter Selected</p>
                                    <div class="mt-2" x-show="Object.keys(filters).length" style="display: none;">
                                        {{ filters|raw }}
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="h-5 w-5 flex items-center justify-center hover:text-turkey-800 transition-all duration-300"
                                x-show="drawer"
                                @click="drawer = false;"
                                x-transition:enter="transition-transform ease-in-out duration-300"
                                x-transition:enter="transform transition ease-in-out duration-300"
                                x-transition:enter-start="-translate-x-full opacity-0"
                                x-transition:enter-end="translate-x-0 opacity-100"
                                x-transition:leave="transform transition ease-in-out duration-300"
                                x-transition:leave-start="translate-x-0 opacity-100"
                                x-transition:leave-end="-translate-x-full opacity-0"
                            >
                                <svg width="23" height="22" viewBox="0 0 23 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M1 1L21 21" stroke="black" stroke-width="2" />
                                    <path d="M22 1L2 21" stroke="black" stroke-width="2" />
                                </svg>
                            </button>
                        </div>
                        <div x-data="{ activeMenu: '' }" class="pb-28 !mt-0">
                            <div class="text-base border-b last:border-0 border-blue-800/50 px-8 md:px-16">
                                <span @click="activeMenu === 'jurisdiction' ? activeMenu = null : activeMenu = 'jurisdiction'" class="hover:text-blue-500 py-8 text-lg transition-all duration-300 flex items-center justify-between w-full cursor-pointer">
                                    Country
                                    <div class="shrink-0 flex items-center justify-center transition-all duration-300" :class="{'!rotate-180' : activeMenu === 'jurisdiction'}">
                                        <svg width="18" height="11" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="m1 1 8 8 8-8" stroke="currentColor" stroke-width="2" />
                                        </svg>
                                    </div>
                                </span>
                                <div style="display:none" x-show="activeMenu === 'jurisdiction'" x-collapse class="pl-2 select-none grid grid-cols-2 gap-x-4 gap-y-3.5 pb-8">
                                    {% for country in countries %}
                                    <div>
                                        <label class="inline-flex cursor-pointer">
                                            <input type="checkbox" name="country[]" value="{{ country.slug }}" class="peer disabled:opacity-30 h-[18px] w-[18px] cursor-pointer mt-1 border border-blue-800 bg-transparent text-blue-800 checked:border-blue-800 !shadow-none !outline-none !ring-0 !ring-offset-0 checked:bg-[length:90%_90%] mr-3">
                                            <span class="peer-disabled:opacity-30">{{ country.title }}</span>
                                        </label>
                                    </div>
                                    {% endfor %}
                                </div>
                            </div>
                            <div class="text-base border-b last:border-0 border-blue-800/50 px-8 md:px-16">
                                <span @click="activeMenu === 'casework' ? activeMenu = null : activeMenu = 'casework'" class="hover:text-blue-500 py-8 text-lg transition-all duration-300 flex items-center justify-between w-full cursor-pointer">
                                    Casework
                                    <div class="w-4 h-4 flex items-center justify-center transition-all duration-300" :class="{'!rotate-180' : activeMenu === 'casework'}">
                                        <svg width="18" height="11" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="m1 1 8 8 8-8" stroke="currentColor" stroke-width="2" />
                                        </svg>
                                    </div>
                                </span>
                                <div style="display:none" x-show="activeMenu === 'casework'" x-collapse class="pl-2 select-none grid grid-cols-2 gap-x-4 gap-y-3.5">
                                    {% for casework in caseworks %}
                                    <div>
                                        <label class="inline-flex cursor-pointer">
                                            <input type="checkbox" name="casework[]" value="{{ casework.slug }}" class="peer disabled:opacity-30 h-[18px] w-[18px] cursor-pointer mt-1 border border-blue-800 bg-transparent text-blue-800 checked:border-blue-800 !shadow-none !outline-none !ring-0 !ring-offset-0 checked:bg-[length:90%_90%] mr-1.5">
                                            <span class="peer-disabled:opacity-30">{{ casework.title }}</span>
                                        </label>
                                    </div>
                                    {% endfor %}
                                </div>
                            </div>
                        </div>
                        <div class="px-8 md:px-16 bottom-10 z-10 fixed w-full md:w-[450px] lg:w-[631px]">
                            <button type="submit" class="bg-blue-800 block w-full font-bold text-base text-center hover:cursor-pointer hover:bg-turkey-900 transition-all duration-300 uppercase text-white py-5 px-6">
                                View Jurisdictions
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="absolute z-30 md:left-24 md:bottom-8 left-[4.70rem] bottom-5 whitespace-nowrap duration-700 transition-transform hidden" :class="open ? 'translate-x-0 lg:translate-x-[656px] md:translate-x-[407px]' : 'translate-x-[336px] md:translate-x-0'">
                <p class="text-blue-500 font-bold">Program Footprint</p>
                <p>Jurisdictions: <span class="js-entry-count"></span></p>
            </div>
        </div>
    </div>
</section>

<svg version="1.1" xmlns="http://www.w3.org/2000/svg" style="position: absolute; width: 0; height: 0; overflow: hidden;">
    <defs>
        <symbol id="icon-spinner" viewBox="0 0 512 512">
            <path fill="currentColor" d="M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z"></path>
        </symbol>
        <symbol id="icon-close" viewBox="0 0 9 9" fill="none">
            <path d="M1 1L8 8" stroke="currentColor"></path>
            <path d="M8 1L1 8" stroke="currentColor"></path>
        </symbol>
    </defs>
</svg>
{% endblock %}