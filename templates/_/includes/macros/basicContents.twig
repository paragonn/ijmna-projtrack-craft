{% import "_/includes/macros" as render %}

{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing
}) | raw %}
{% set delay = 0 %}

{% if eyebrow|length %}
<h6 class="{{ heading|length or text|length or buttons|length ? 'mb-5' }} {{ eyebrowExtraClasses|length ? eyebrowExtraClasses : 'text-base tracking-widest' }} {{ eyebrowSpacing|length ? eyebrowSpacing }} {{ render.getAlignment({alignment: contentAlignment, type: ['text']}) }} {{ render.getFontWeight({font: eyebrowFontWeight}) }} {{ eyebrowCapitalize ? 'uppercase' }} {{ render.foregroundColors({
    background: backgroundColorLabel,
    opacity: opacity,
    changeDefaultColor: changeDefaultColor,
    type: 'eyebrow',
}) }}" {{ contentAnimation|raw }}>
    {{ eyebrow }}
</h6>
{% endif %}

{% if heading|length %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}

<{{ headingTag }} class="{{ headingSpacing }} {{ text|length or buttons|length or quote|length ? 'mb-5' }} {{ headingExtraClasses ?? 'font-Baskervville -tracking-wide' }} {{ setAlignment ? render.getAlignment({alignment: contentAlignment, type: ['text']}) }} {{ render.getHeadingSize({headingTag: headingSize}) }} {{ render.getFontWeight({font: fontWeight}) }} {{ render.foregroundColors({
    background: backgroundColorLabel,
    opacity: opacity,
    changeDefaultColor: changeDefaultColor,
    type: 'heading',
}) }}" {{ contentAnimation|raw }}>
    {{ heading|nl2br }}
</{{ headingTag }}>
{% endif %}

{% if text|length %}
{% set delay = delay + 200 %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}

<div class="space-y-3 {{ quote|length ? 'mb-4' }} {{ textParentDivClass|length ? textParentDivClass }} {{ setAlignment ? render.getAlignment({alignment: contentAlignment, type: ['text']}) }}" {{ contentAnimation|raw }}>
    {{ render.replaceElements(text, {
        background: backgroundColorLabel,
        contentAlignment: contentAlignment,
        opacity: opacity,
        changeDefaultColor: changeDefaultColor,
        fontFamily: fontFamily,
        paragraphFontSize: overrideParagraphFontSize|length ? overrideParagraphFontSize
    }) }}
</div>
{% endif %}

{% if quote|length %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}
<blockquote class="font-Baskervville -tracking-wide {{ quoteBorder ? 'rounded-tr rounded-br border border-l-4 p-5 pl-3.5 bg-transparent' }} {{ quoteExtraClasses ?? 'text-2xl lg:text-3xl' }} {{ setAlignment ? render.getAlignment({alignment: contentAlignment, type: ['text']}) }} {{ quoteBorder ? render.foregroundColors({background: backgroundColorLabel, opacity: opacity, changeDefaultColor: changeDefaultColor, type: 'quote-border' }) }} {{ render.foregroundColors({
    background: backgroundColorLabel,
    opacity: opacity,
    changeDefaultColor: changeDefaultColor,
    type: blockquoteType ?? 'heading',
}) }}" {{ contentAnimation|raw }}>
    <div>
        <span>
            {% set params = {
                text: '"' ~ quote ~ '"',
                class: 'font-bold'
            } %}
            {{ render.replaceUnderscores(params) }}
        </span>

        {% if quoteAttribution|length %}
        <p class="mt-3">{{ '- ' ~ quoteAttribution }}</p>
        {% endif %}
    </div>
</blockquote>
{% endif %}

{% for button in buttons %}
{% set delay = delay + 200 %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}
{% if loop.first %}
<div class="flex flex-wrap gap-8 {{ eyebrow|length or heading|length or text|length ? 'mt-6' }} {{ render.getAlignment({
    alignment: contentAlignment,
    type: 'justify'
}) }}" {{ contentAnimation|raw }}>
{% endif %}
    {{ render.createButton({
        button: button.button,
        buttonId: button.getId(),
        buttonType: button.buttonType.getValue()|default(defaultButtonType|length ? defaultButtonType : "button"),
        buttonColor: button.buttonColor.label|default('blue-800'),
        icon: button.icon,
        iconPosition: button.iconPosition.getValue()|default('right'),
        background: backgroundColorLabel
    }) }}
{% if loop.last %}
</div>
{% endif %}
{% endfor %}