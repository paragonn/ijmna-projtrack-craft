{#
===============================================================================
    Split (split)

    Variables
        - Block (block)

    Fields:
        Content:
            Child (Content): (slide)
                - Image (image)
                - Eyebrow (eyebrow)
                - Heading (heading)
                - Text (text)
                - Buttons (buttons) [Matrix]
                    - Button Type (buttonType)
                    - Button Color (buttonColor)
                    - Icon (icon)
                    - Icon Position (iconPosition)
                    - Button (button)

            Auxiliary:
                - Embed Video (embedVideo)

            Settings:
                - Content Alignment (contentAlignment)
                - Background Color (backgroundColor)
                - Overlay Opacity (overlayOpacity)
                - Image Position (imagePosition)
                - Heading Size (headingSize)
                - Font Weight (fontWeight)
===============================================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set contentAlignment = block.contentAlignment.value|default('center') %}
{% set overlayOpacity = block.overlayOpacity.getValue()|default('none') %}
{% set imagePosition = block.imagePosition.getValue()|default('right') %}
{% set headingTag = block.headingSize.getValue()|default('h1') %}
{% set fontWeight = block.fontWeight.getValue()|default('normal') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set imageAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle.value|default('fade-up'),
    animationDuration: block.animationDuration.value|default(1500),
    animationOffset: block.animationOffset.value|default(200),
    animationEasing: block.animationEasing.value|default(null)
}) | raw %}

{% set buttons = block.buttons.all() %}
{% set image = block.image.one() %}
{% set embedVideoMedia = block.embedVideo.media ?? null %}

<section class="mt-[79px] lg:min-h-[900px] lg:flex relative {{ backgroundColor }} {{ bgOpacity }}">
    {% if image|length or embedVideoMedia|length %}
    <div class="lg:absolute lg:inset-y-0 z-10 {{ imagePosition == 'left' ? 'lg:left-0' : 'lg:right-0' }} {{ block.eyebrow|length or block.heading|length or block.text|length or buttons|length ? 'lg:w-1/2' : 'w-full' }} " {{ imageAnimation|raw }}>
        {{ render.renderVideo({
            image: image|length ? image,
            alt: image|length ? image.title,
            width: image|length ? image.width,
            height: image|length ? image.height,
            class: "object-cover max-h-96 lg:max-h-none lg:!h-full w-full",
            lazy: false,
            videos: embedVideoMedia,
            videoType: 'popup',
            videoId: block.getId()
        }) }}
    </div>
    {% endif %}

    <div class="container flex items-center lg:min-h-[900px] relative {{ imagePosition == 'left' ? 'flex-row-reverse' }}">
        {% if block.eyebrow|length or block.heading|length or block.text|length or buttons|length %}
        <div class="relative z-10 lg:w-full lg:max-w-[490px] xl:max-w-[557px]">
            <div class="relative md:py-32 pt-12 pb-24 {{ imagePosition == 'left' ? 'pl-8' : 'pr-8' }}">
                {{ render.basicContents({
                    eyebrow: block.eyebrow,
                    heading: block.heading,
                    text: block.text,
                    buttons: buttons,
                    headingTag: headingTag,
                    headingSize: headingTag,
                    fontWeight: fontWeight,
                    eyebrowFontWeight: 'bold',
                    fontFamily: '',
                    overrideParagraphFontSize: 'text-lg',
                    backgroundColorLabel: backgroundColorLabel,
                    opacity: overlayOpacity,
                    contentAlignment: contentAlignment,
                    animation: block.animation,
                    contentAnimationStyle: block.animationStyle2.value|default('fade-up'),
                    contentAnimationDuration: block.animationDuration2.value|default(1500),
                    contentAnimationOffset: block.animationOffset2.value|default(200),
                    contentAnimationEasing: block.animationEasing2.value|default(null)
                }) }}
            </div>
        </div>
        {% endif %}

        {% if entry is defined and entry.isHomepage %}
        <div class="absolute bottom-2 lg:bottom-11 z-10"
            x-data='{
                nextBlockId  : "page-content",

                scrollToNextSection() {
                    let _this = this;
                    let selector = document.querySelector("#" + _this.nextBlockId);

                    window.scroll({
                        behavior: "smooth",
                        top: selector.offsetTop - 79
                    });
                }
            }'
        >
            <a href="javascript:;" class="transition-all duration-300 {{ backgroundColorLabel in ['white', 'blue-100'] ? 'text-blue-800 hover:text-blue-500' : 'text-white hover:text-blue-100' }}"
                x-on:click="scrollToNextSection();"
                aria-label="Go to next Section"
            >
                <svg width="53" height="54" viewBox="0 0 53 54" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M25.8775 51.591L1.47266 26.0464M25.8775 51.591L25.8775 -2.91024e-07M25.8775 51.591L51 26.0464" stroke="currentColor" stroke-width="3" />
                </svg>
            </a>
        </div>
        {% endif %}
    </div>
</section>