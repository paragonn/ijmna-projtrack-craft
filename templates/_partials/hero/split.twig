{#
===============================================================================
    Split (split)

    Variables
        - Block (block)

    Fields:
        Content:
            Child (Content): (slide)
                - Image (image)
                - Eyebrow (eyebrow)
                - Heading (heading)
                - Text (text)
                - Buttons (buttons) [Matrix]
                    - Button Type (buttonType)
                    - Button Color (buttonColor)
                    - Icon (icon)
                    - Icon Position (iconPosition)
                    - Button (button)

            Auxiliary:
                - Embed Video (embedVideo)

            Settings:
                - Content Alignment (contentAlignment)
                - Background Color (backgroundColor)
                - Overlay Opacity (overlayOpacity)
                - Image Position (imagePosition)
                - Heading Size (headingSize)
                - Font Weight (fontWeight)
===============================================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set contentAlignment = block.contentAlignment.value|default('center') %}
{% set overlayOpacity = block.overlayOpacity.getValue()|default('none') %}
{% set imagePosition = block.imagePosition.getValue()|default('right') %}
{% set headingTag = block.headingSize.getValue()|default('h1') %}
{% set fontWeight = block.fontWeight.getValue()|default('normal') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set imageAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle.value|default('fade-up'),
    animationDuration: block.animationDuration.value|default(1500),
    animationOffset: block.animationOffset.value|default(200),
    animationEasing: block.animationEasing.value|default(null)
}) | raw %}

{% set buttons = block.buttons.all() %}
{% set image = block.image.one() %}
{% set embedVideo = block.embedVideo %}

<section class="mt-[79px] lg:min-h-[900px] lg:flex relative {{ backgroundColor }} {{ bgOpacity }}">

    {# {% if image|length or embedVideo|length %}
    <div class="bg-gray-50 lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2" {{ imageAnimation|raw }}>
        {{ render.setImage({
            image: image,
            alt: image.title,
            width: image.width,
            height: image.height,
            class: 'object-cover max-h-96 lg:max-h-none lg:!h-full w-full'
        }) }}
    </div>
    {% endif %} #}

    <div class="container flex items-center lg:min-h-[900px] relative">
        {% if block.eyebrow|length or block.heading|length or block.text|length or buttons|length %}
        <div class="relative z-10 lg:w-full lg:max-w-[490px] xl:max-w-[550px]">
            <div class="relative md:py-32 pt-12 pb-24">
                {{ render.basicContents({
                    eyebrow: block.eyebrow,
                    heading: block.heading,
                    text: block.text,
                    buttons: buttons,
                    headingTag: headingTag,
                    headingSize: headingTag,
                    fontWeight: fontWeight,
                    eyebrowFontWeight: 'bold',
                    fontFamily: '',
                    overrideParagraphFontSize: 'text-lg',
                    backgroundColorLabel: backgroundColorLabel,
                    opacity: overlayOpacity,
                    contentAlignment: contentAlignment,
                    animation: block.animation,
                    contentAnimationStyle: block.animationStyle2.value|default('fade-up'),
                    contentAnimationDuration: block.animationDuration2.value|default(1500),
                    contentAnimationOffset: block.animationOffset2.value|default(200),
                    contentAnimationEasing: block.animationEasing2.value|default(null)
                }) }}
            </div>
        </div>
        {% endif %}

        <div class="absolute bottom-2 lg:bottom-11 left-4">
            <a href="#" class="hover:text-blue-500 transition-all duration-300">
                <svg width="53" height="54" viewBox="0 0 53 54" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M25.8775 51.591L1.47266 26.0464M25.8775 51.591L25.8775 -2.91024e-07M25.8775 51.591L51 26.0464" stroke="currentColor" stroke-width="3" />
                </svg>
            </a>
        </div>
    </div>
</section>


{# <section class="mt-[79px] lg:min-h-[900px] lg:flex relative">
    <div class="bg-gray-50 lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2">
        <img class="object-cover max-h-96 lg:max-h-none lg:!h-full w-full" src="/assets/images/home-bg.png" alt="">
    </div>
    <div class="container flex items-center lg:min-h-[900px] relative">
        <div class="relative z-10 lg:w-full lg:max-w-[490px] xl:max-w-[550px]">
            <div class="relative md:py-32 pt-12 pb-24">
                <p class="uppercase tracking-widest text-lg md:text-xl font-bold text-blue-500">Lorem Ipsum</p>
                <h1 class="text-4xl/tight lg:text-5xl/tight font-Baskervville -tracking-wide mt-6">Quick lorem ipsum about problem but also offering hope. IJM has a proven solution to make lasting change possible.</h1>
            </div>
        </div>
        <div class="absolute bottom-2 lg:bottom-11 left-4">
            <a href="#" class="hover:text-blue-500 transition-all duration-300">
                <svg width="53" height="54" viewBox="0 0 53 54" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M25.8775 51.591L1.47266 26.0464M25.8775 51.591L25.8775 -2.91024e-07M25.8775 51.591L51 26.0464" stroke="currentColor" stroke-width="3" />
                </svg>
            </a>
        </div>
    </div>
</section> #}