{#
===============================================================================
    Status Cards (statusCards)

    Variables
        - Block (block)

    Fields:
        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Content:
            Child:
                - Card (card)
                    - Heading (heading)
                    - Text (text)
                    - Current Status (currentStatus)
                    - Status Color (statusColor)
                    - Buttons (buttons) [Matrix]
                        - Button Type (buttonType)
                        - Button Color (buttonColor)
                        - Icon (icon)
                        - Icon Position (iconPosition)
                        - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Container Size (containerSize)
            - Per Row Limit (perRowLimit)
            - Background Color (backgroundColor)
            - Overlay Opacity (overlayOpacity)
            - Content Alignment (contentAlignment2)
            - Heading Size (headingSize2)
            - Font Weight (fontWeight2)
            - Content Alignment (contentAlignment)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
===============================================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set getMinusMarginTop = block.minusMarginTop.getValue()|default(null) %}
{% set getMinusMarginBottom = block.minusMarginBottom.getValue()|default(null) %}

{# Parent Block Fields Start #}
{% set parent = parent ?? null %}
{% set childContainer = childContainer ?? false %}
{% set sectionTag = childContainer ? 'div' : 'section' %}
{# Parent Block Fields End #}

{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('normal') %}
{% set contentAlignment = block.contentAlignment.value|default('center') %}
{% set containerSize = block.containerSize.getValue()|default('full') %}
{% set contentWidth = block.contentWidth|default('1;11') %}
{% set showBorder = block.showBorder %}

{% set cardHeadingTag = block.headingSize2.getValue()|default('h4') %}
{% set cardFontWeight = block.fontWeight2.getValue()|default('normal') %}
{% set cardContentAlignment = block.contentAlignment2.value|default('center') %}

{% set borderDefaultColor = 'blue-800' %}
{% set borderColor = block.borderColor.label|default(showBorder ? borderDefaultColor : null) %}

{% set conbackgroundColor = conbackgroundColor ?? null %}
{% set backgroundColorLabel = block.backgroundColor.label|default(conbackgroundColor ?? 'white') %}
{% set containerBgExist = conbackgroundColor != backgroundColorLabel %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set conOverlayOpacity = conOverlayOpacity ?? null %}
{% set overlayOpacity = block.overlayOpacity.getValue()|default(conOverlayOpacity ?? 'none') %}
{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set contentBoxColorLabel = block.contentBoxColor.label|default('transparent') %}
{% set contentBoxColor = render.color({
    handle: contentBoxColorLabel,
    swatch: 'box-color'
}) %}

{% set perRowLimit = block.perRowLimit.getValue()|default(parent == 'accordion' ? '2' : '3') %}
{% set rowLimit = {
    2: 'grid-cols-1 md:grid-cols-2',
    3: 'grid-cols-1 md:grid-cols-3',
    4: 'grid-cols-1 md:grid-cols-3 lg:grid-cols-4'
} %}

{% set cardAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle2.value|default('fade-up'),
    animationDuration: block.animationDuration2.value|default(1500),
    animationOffset: block.animationOffset2.value|default(200),
    animationEasing: block.animationEasing2.value|default(null)
}) | raw %}

{% set borderLabel = ((backgroundColorLabel == borderColor and backgroundColorLabel != 'white' and contentBoxColorLabel != 'white') ? 'white' : (backgroundColorLabel in ['white'] and borderColor in ['white'] ? 'blue' : borderColor)) %}
{% set buttons = block.buttons.all() %}
{% set cards = block.statusCard.all() %}

{% set addStickyClass = (getMinusMarginBottom|length and getMinusMarginBottom != 'none') or (getMinusMarginTop|length and getMinusMarginTop != 'none') ? 'z-[5] relative' %}
<{{ sectionTag }} id="{{ block.containerId|length ? block.containerId : 'block-' ~ block.getId() }}" class="{{ addStickyClass }} {{ not childContainer and containerSize == 'container' and contentWidth == '0;12' ? 'container' }} {{ containerSize == 'container' ? render.contentWidth({width: contentWidth}) }} {{ spacing.implode(' ') }} {{ containerBgExist ? backgroundColor }} {{ bgOpacity }} {{ containerBgExist and childContainer ? 'px-4 md:px-6' }}">
    <div class="{{ not childContainer ? 'container' }}">
        <div class="{{ showBorder and borderColor != null ? 'border py-24 px-4 ' ~ contentBoxColor ~ render.foregroundColors({
            background: borderLabel,
            opacity: overlayOpacity,
            changeDefaultColor: true,
            type: 'borderColor'
        }) }}">
            <div class="grid grid-cols-1 {{ containerSize == 'full' ? render.contentWidth({width: contentWidth}) }}">
                {% if block.eyebrow|length or block.heading|length or block.text|length %}
                <div class="mb-16 {{ render.getAlignment({alignment: contentAlignment, type: 'text'}) }}">
                    {{ render.basicContents({
                        eyebrow: block.eyebrow,
                        heading: block.heading,
                        text: block.text,
                        headingTag: headingTag,
                        headingSize: headingTag,
                        fontWeight: fontWeight,
                        eyebrowFontWeight: 'bold',
                        fontFamily: '',
                        overrideParagraphFontSize: 'text-lg',
                        backgroundColorLabel: showBorder and contentBoxColorLabel == 'white' ? contentBoxColorLabel : backgroundColorLabel,
                        opacity: overlayOpacity,
                        contentAlignment: contentAlignment,
                        animation: block.animation,
                        contentAnimationStyle: block.animationStyle.value|default('fade-up'),
                        contentAnimationDuration: block.animationDuration.value|default(1500),
                        contentAnimationOffset: block.animationOffset.value|default(200),
                        contentAnimationEasing: block.animationEasing.value|default(null)
                    }) }}
                </div>
                {% endif %}

                {% if cards|length %}
                <div class="grid gap-y-10 gap-5 {{ rowLimit[perRowLimit] }} {{ buttons|length ? 'mb-10' }}">
                    {% for card in cards %}
                    {% set cardButtons = card.buttons.all() %}
                    <div>
                        <div class="text-center">
                            {% if card.heading|length or card.text|length %}
                                {{ render.basicContents({
                                    heading: card.heading,
                                    text: card.text,
                                    headingTag: cardHeadingTag,
                                    headingSize: cardHeadingTag,
                                    fontWeight: cardFontWeight,
                                    fontFamily: '',
                                    backgroundColorLabel: showBorder and contentBoxColorLabel == 'white' ? contentBoxColorLabel : backgroundColorLabel,
                                    opacity: overlayOpacity,
                                    contentAlignment: cardContentAlignment,
                                    animation: block.animation,
                                    contentAnimationStyle: block.animationStyle2.value|default('fade-up'),
                                    contentAnimationDuration: block.animationDuration2.value|default(1500),
                                    contentAnimationOffset: block.animationOffset2.value|default(200),
                                    contentAnimationEasing: block.animationEasing2.value|default(null)
                                }) }}
                            {% endif %}

                            {% if card.currentStatus|length %}
                            <p class="text-xl font-bold {{ card.heading|length or card.text|length ? 'mt-4' }} {{ cardButtons|length ? 'mb-4' }}">Current Status: <span style="color: {{ card.statusColor }}">{{ card.currentStatus }}</span></p>
                            {% endif %}

                            {{ render.basicContents({
                                buttons: cardButtons,
                                backgroundColorLabel: showBorder and contentBoxColorLabel == 'white' ? contentBoxColorLabel : backgroundColorLabel,
                                opacity: overlayOpacity,
                                contentAlignment: cardContentAlignment,
                                animation: block.animation,
                                contentAnimationStyle: block.animationStyle2.value|default('fade-up'),
                                contentAnimationDuration: block.animationDuration2.value|default(1500),
                                contentAnimationOffset: block.animationOffset2.value|default(200),
                                contentAnimationEasing: block.animationEasing2.value|default(null)
                            }) }}
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% endif %}

                {{ render.basicContents({
                    buttons: buttons,
                    backgroundColorLabel: showBorder and contentBoxColorLabel == 'white' ? contentBoxColorLabel : backgroundColorLabel,
                    opacity: overlayOpacity,
                    contentAlignment: contentAlignment,
                    animation: block.animation,
                    contentAnimationStyle: block.animationStyle.value|default('fade-up'),
                    contentAnimationDuration: block.animationDuration.value|default(1500),
                    contentAnimationOffset: block.animationOffset.value|default(200),
                    contentAnimationEasing: block.animationEasing.value|default(null)
                }) }}
            </div>
        </div>
    </div>
</{{ sectionTag }}>